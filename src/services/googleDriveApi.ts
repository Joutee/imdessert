// Google Drive API konfigurace a funkce pro frontend
import { gapi } from "gapi-script";

// Google Drive API konfigurace z environment variables
const CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID;
const CLIENT_SECRET = process.env.REACT_APP_GOOGLE_CLIENT_SECRET;
const REFRESH_TOKEN = process.env.REACT_APP_GOOGLE_REFRESH_TOKEN;
const ACCESS_TOKEN = process.env.REACT_APP_GOOGLE_ACCESS_TOKEN;

// ID hlavn√≠ slo≈æky galerie
const MAIN_FOLDER_ID = process.env.REACT_APP_GOOGLE_DRIVE_FOLDER_ID;

// Kontrola, jestli jsou v≈°echny pot≈ôebn√© environment variables nastaven√©
if (
  !CLIENT_ID ||
  !CLIENT_SECRET ||
  !REFRESH_TOKEN ||
  !ACCESS_TOKEN ||
  !MAIN_FOLDER_ID
) {
  console.error(
    "‚ùå Chyb√≠ Google Drive API konfigurace v environment variables!"
  );
  console.error(
    "Ujistƒõte se, ≈æe m√°te nastaven√© v≈°echny REACT_APP_GOOGLE_* promƒõnn√© v .env souboru"
  );
}

// Mapov√°n√≠ n√°zv≈Ø slo≈æek na kategorie
const FOLDER_NAME_MAP: { [key: string]: string } = {
  "Svatebni dorty": "Svatebn√≠ dorty",
  "Svatebn√≠ dorty": "Svatebn√≠ dorty",
  Dortiky: "Dort√≠ky",
  "Svatebni bary": "Svatebn√≠ bary",
  "Svatebn√≠ bary": "Svatebn√≠ bary",
  Poharky: "Poh√°rky",
  Poh√°rky: "Poh√°rky",
  Tartaletky: "Tartaletky",
  Minidezerty: "Minidezerty",
  "Odpalovane vetr": "Odpalovan√© vƒõtrn√≠ƒçky",
  "Odpalovan√© vƒõtr": "Odpalovan√© vƒõtrn√≠ƒçky",
  "Ovoce a tvary": "Ovoce a tvary",
  "Tradicni zakusky": "Tradiƒçn√≠ z√°kusky",
  "Tradiƒçn√≠ z√°kusky": "Tradiƒçn√≠ z√°kusky",
};

export interface GoogleDriveImage {
  id: string;
  name: string;
  thumbnailLink: string;
  webViewLink: string;
  webContentLink: string;
  category: string;
}

class GoogleDriveApiService {
  private isInitialized = false;

  // Inicializace Google API
  async initialize(): Promise<void> {
    if (this.isInitialized) return;

    if (!CLIENT_ID || !ACCESS_TOKEN) {
      throw new Error(
        "Chyb√≠ Google Drive API konfigurace - CLIENT_ID nebo ACCESS_TOKEN"
      );
    }

    try {
      await new Promise<void>((resolve, reject) => {
        gapi.load("client:auth2", {
          callback: async () => {
            try {
              await gapi.client.init({
                clientId: CLIENT_ID,
                discoveryDocs: [
                  "https://www.googleapis.com/discovery/v1/apis/drive/v3/rest",
                ],
                scope: "https://www.googleapis.com/auth/drive.readonly",
              });

              // Nastaven√≠ access tokenu
              gapi.client.setToken({
                access_token: ACCESS_TOKEN,
              });

              this.isInitialized = true;
              console.log("‚úÖ Google Drive API inicializov√°no");
              resolve();
            } catch (error) {
              console.error("‚ùå Chyba p≈ôi inicializaci Google API:", error);
              reject(error);
            }
          },
          onerror: (error: any) => {
            console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ Google API:", error);
            reject(error);
          },
        });
      });
    } catch (error) {
      console.error("‚ùå Chyba p≈ôi inicializaci:", error);
      throw error;
    }
  }

  // Z√≠sk√°n√≠ v≈°ech podslo≈æek v hlavn√≠ slo≈æce galerie
  async getGalleryFolders(forceRefresh: boolean = false): Promise<any[]> {
    await this.initialize();

    try {
      const response = await gapi.client.request({
        path: "https://www.googleapis.com/drive/v3/files",
        params: {
          q: `'${MAIN_FOLDER_ID}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false`,
          fields: "files(id,name,modifiedTime)",
          orderBy: "name",
          pageSize: 1000, // Zv√Ω≈°√≠me limit pro v√≠ce slo≈æek
        },
        headers: forceRefresh
          ? {
              "Cache-Control": "no-cache",
              Pragma: "no-cache",
            }
          : {},
      });

      console.log("üìÅ Nalezen√© slo≈æky:", response.result.files);
      console.log(`üìä Poƒçet slo≈æek: ${response.result.files?.length || 0}`);

      if (forceRefresh) {
        console.log("üîÑ Pou≈æito force refresh pro slo≈æky");
      }

      return response.result.files || [];
    } catch (error) {
      console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ slo≈æek:", error);
      throw error;
    }
  }

  // Z√≠sk√°n√≠ obr√°zk≈Ø ze slo≈æky
  async getImagesFromFolder(
    folderId: string,
    folderName: string,
    forceRefresh: boolean = false
  ): Promise<GoogleDriveImage[]> {
    await this.initialize();

    try {
      const response = await gapi.client.request({
        path: "https://www.googleapis.com/drive/v3/files",
        params: {
          q: `'${folderId}' in parents and (mimeType contains 'image/') and trashed=false`,
          fields:
            "files(id,name,thumbnailLink,webViewLink,webContentLink,modifiedTime,createdTime,size)",
          orderBy: forceRefresh ? "createdTime desc" : "name", // Nejnovƒõj≈°√≠ prvn√≠ p≈ôi force refresh
          pageSize: 1000, // Zv√Ω≈°√≠me limit pro v√≠ce obr√°zk≈Ø
        },
        headers: forceRefresh
          ? {
              "Cache-Control": "no-cache",
              Pragma: "no-cache",
            }
          : {},
      });

      const images = response.result.files || [];
      const category = FOLDER_NAME_MAP[folderName] || folderName;

      console.log(
        `üì∑ Slo≈æka "${folderName}" -> Kategorie "${category}": ${
          images.length
        } obr√°zk≈Ø${forceRefresh ? " (force refresh)" : ""}`
      );

      // Debug: kontrola raw dat z API
      if (images.length > 0) {
        console.log("üîç Raw data z API pro prvn√≠ obr√°zek:", images[0]);
        console.log(
          "üîç V≈°echna pole v prvn√≠m obr√°zku:",
          Object.keys(images[0])
        );
        console.log("üîç thumbnailLink existuje?", !!images[0].thumbnailLink);
        console.log("üîç thumbnailLink hodnota:", images[0].thumbnailLink);
      }

      const mappedImages = images.map((file: any) => ({
        id: file.id,
        name: file.name,
        thumbnailLink: file.thumbnailLink,
        webViewLink: file.webViewLink,
        webContentLink: file.webContentLink,
        category: category,
      }));

      // Debug: uk√°zka prvn√≠ho obr√°zku
      if (mappedImages.length > 0) {
        const firstImage = mappedImages[0];
        console.log(`üîç Uk√°zka URLs pro "${firstImage.name}":`, {
          thumbnailLink: firstImage.thumbnailLink,
          thumbnailExists: !!firstImage.thumbnailLink,
          webViewLink: firstImage.webViewLink,
          webViewExists: !!firstImage.webViewLink,
          directUrl: this.getDirectImageUrl(firstImage.id),
          highResUrl: this.getHighResImageUrl(firstImage.id),
        });

        if (!firstImage.thumbnailLink) {
          console.warn(
            "‚ö†Ô∏è VAROV√ÅN√ç: thumbnailLink chyb√≠! Mo≈æn√Ω probl√©m s opr√°vnƒõn√≠mi."
          );
        }
      }

      return mappedImages;
    } catch (error) {
      console.error(
        `‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ obr√°zk≈Ø ze slo≈æky ${folderName}:`,
        error
      );
      return [];
    }
  }

  // Z√≠sk√°n√≠ v≈°ech obr√°zk≈Ø z galerie
  async getAllGalleryImages(
    forceRefresh: boolean = false
  ): Promise<GoogleDriveImage[]> {
    try {
      console.log(
        `üîÑ Naƒç√≠t√°m obr√°zky z Google Drive${
          forceRefresh ? " (force refresh)" : ""
        }...`
      );

      const folders = await this.getGalleryFolders(forceRefresh);
      console.log(
        `üìÅ Nalezeno celkem ${folders.length} slo≈æek:`,
        folders.map((f) => f.name)
      );

      const allImages: GoogleDriveImage[] = [];

      // Paraleln√≠ naƒç√≠t√°n√≠ obr√°zk≈Ø ze v≈°ech slo≈æek
      const imagePromises = folders.map((folder) =>
        this.getImagesFromFolder(folder.id, folder.name, forceRefresh)
      );

      const imageArrays = await Promise.all(imagePromises);

      // Spojen√≠ v≈°ech obr√°zk≈Ø do jednoho pole
      imageArrays.forEach((images, index) => {
        console.log(
          `üì¶ Slo≈æka ${folders[index].name}: ${images.length} obr√°zk≈Ø`
        );
        allImages.push(...images);
      });

      // Debug informace o kategori√≠ch
      const categories = Array.from(
        new Set(allImages.map((img) => img.category))
      );
      console.log(`üè∑Ô∏è Jedineƒçn√© kategorie (${categories.length}):`, categories);

      // Statistiky podle kategori√≠
      categories.forEach((category) => {
        const count = allImages.filter(
          (img) => img.category === category
        ).length;
        console.log(`   ${category}: ${count} obr√°zk≈Ø`);
      });

      console.log(
        `‚úÖ Naƒçteno celkem ${allImages.length} obr√°zk≈Ø z ${
          folders.length
        } slo≈æek${forceRefresh ? " (s vynucen√Ωm obnoven√≠m)" : ""}`
      );

      return allImages;
    } catch (error) {
      console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ galerie:", error);
      throw error;
    }
  }

  // Konverze Google Drive URL na p≈ô√≠m√Ω odkaz pro zobrazen√≠
  getDirectImageUrl(fileId: string): string {
    // Alternativn√≠ form√°ty pro r≈Øzn√© p≈ô√≠pady pou≈æit√≠
    return `https://drive.google.com/uc?export=download&id=${fileId}`;
  }

  // Alternativn√≠ URL pro vƒõt≈°√≠ obr√°zky
  getHighResImageUrl(fileId: string): string {
    return `https://drive.google.com/uc?export=view&id=${fileId}`;
  }

  // Nov√° metoda pro vƒõt≈°√≠ thumbnail
  getBetterThumbnailUrl(thumbnailLink: string): string {
    if (!thumbnailLink) return "";
    // Nahrad√≠ =s220 za =s800 pro vƒõt≈°√≠ thumbnail
    return thumbnailLink.replace("=s220", "=s800");
  }

  // Nov√° metoda pro high quality obr√°zky v galerii
  getGalleryImageUrl(fileId: string): string {
    // N√°vrat k spolehliv√©mu thumbnail URL, ale s vy≈°≈°√≠ kvalitou
    return `https://drive.google.com/uc?export=view&id=${fileId}`;
  }

  // Refresh access token kdy≈æ expiruje
  async refreshAccessToken(): Promise<void> {
    if (!CLIENT_ID || !CLIENT_SECRET || !REFRESH_TOKEN) {
      throw new Error("Chyb√≠ Google OAuth konfigurace pro refresh tokenu");
    }

    try {
      const response = await fetch("https://oauth2.googleapis.com/token", {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
        body: new URLSearchParams({
          client_id: CLIENT_ID,
          client_secret: CLIENT_SECRET,
          refresh_token: REFRESH_TOKEN,
          grant_type: "refresh_token",
        }),
      });

      if (response.ok) {
        const data = await response.json();
        gapi.client.setToken({
          access_token: data.access_token,
        });
        console.log("üîÑ Access token obnoven");
      } else {
        console.error("‚ùå Chyba p≈ôi obnoven√≠ tokenu:", await response.text());
      }
    } catch (error) {
      console.error("‚ùå Chyba p≈ôi obnoven√≠ access tokenu:", error);
    }
  }
}

export const googleDriveApi = new GoogleDriveApiService();
